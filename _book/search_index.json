[
["index.html", "ggplot2 for ocean data Chapter 1 Preface", " ggplot2 for ocean data Hansen Johnson 2020-06-18 Chapter 1 Preface Almost none of the ideas here are my own. Most of it is paraphrased from the wonderful ggplot2 book (Wickham 2016). The content of the example plots caters to ocean science applications, but hopefully the concepts are universal. This tutorial was written using bookdown package (Xie 2020) in this sample book, which was built on top of R Markdown and knitr (Xie 2015). References "],
["intro.html", "Chapter 2 Introduction 2.1 What is ggplot2? 2.2 Data 2.3 Aesthetics 2.4 Geometries", " Chapter 2 Introduction 2.1 What is ggplot2? The “gg” in ggplot2 is short for “Grammar of Graphics” (Wilkinson 2005), which defines a common grammar for all data visualizations. What is this grammar? In brief, the grammar tells us that a statistical graphic is a mapping from data to aesthetic attributes (colour, shape, size) of geometric objects (points, lines, bars). The plot may also contain statistical transformations of the data and is drawn on a specific coordinate system. Facetting can be used to generate the same plot for different subsets of the dataset. It is the combination of these independent components that make up a graphic (Wickham 2016). ggplot2 was built on this concept, providing an elegant means of combining each of these elements to create virtually any statistical graphic imaginable. Other plotting libraries typically rely on pre-specified functions to plot data in a specific way. This is useful in certain applications, but can become extremely limiting when trying to visualize data in unconventional ways. It takes time to understand and appreciate the ggplot2 approach, but once you master the grammar it is as liberating as learning a new language. The 3 key components of every plot are: Data (data =) Aesthetics (aes()) Geometries (geom_*()) Let’s go into each in a little more detail… 2.2 Data Input data for ggplot2 must be tidy. Tidy data means: Each variable must have its own column Each observation must have its own row Each value must have its own cell In practice that means you should: Put each dataset in a data frame (or tibble) Put each variable in a column ggplot2 is part of an ecosystem of packages called the tidyverse, which provide common (amazing) tools for working with “tidy” data. For more information on the tidyverse or this approach see the tidyverse website (https://www.tidyverse.org/) or R for Data Science book (https://r4ds.had.co.nz/) 2.3 Aesthetics This is maybe the most confusing part of the ggplot2 grammar. Aesthetics refer to mapped relationship between variables in the data and the visual properties of the plot. Aesthetic properties of plots include the following: x y color fill size shape linetype label alpha This mapping is achieved using the mapping = aes() argument within either the ggplot() function, or within geometry function (geom_*(); more on these next). This will hopefully make more sense once we start moving through some hands-on examples. 2.4 Geometries The data and aesthetic mapping are then used to plot the data using a given geometry. Examples of geometries include: point bar line path ribbon contour raster polygon segment label area (and more…) Each geometry is called using a function with the geom_ prefix. For example, points are created with geom_point(), paths with geom_path(), etc. Each geometry has a specific set of required aesthetics. These are all easily available in the function documentation (use ?geom_path() to see the documentation for geom_path(). References "],
["getting-started.html", "Chapter 3 Getting started 3.1 Plotting 3.2 Formatting", " Chapter 3 Getting started Load the ggplot2 library and read in the example dataset we’ll be using for most of these plots. This is a timeseries of detections of different whale species collected by an ocean glider off southern Nova Scotia, Canada, in the fall of 2017. # the ggplot library library(ggplot2) # the dplyr library (for occasional data manipulation) library(dplyr) # daily counts of whale daily detections df = readRDS(url(&#39;https://hansenjohnson.org/files/data/detections_daily.rds&#39;)) 3.1 Plotting Let’s make a bar plot of how the number of detections per day (n) changed over time (date). We’ll specify that we’re going to use df as our input data, that the variable date should be mapped to the x axis and the variable n should be mapped to the y axis, and that we’d like to use a column (col) geometry. Here’s how to do that: ggplot(data = df, mapping = aes(x=date,y=n))+ geom_col() There are a few things to note here: every ggplot2 plot must start with the ggplot() function the + is used to connect multiple functions associated with the given plot the data = argument is used to refer to the input table the mapping = argument is used to refer to the mapping aesthetics, which are specified using the aes() function the geometry is specified using the geom_col() function. You will also see this written as follows: ggplot()+ geom_col(data = df, mapping = aes(x=date,y=n)) This produces identical results. I prefer using this method because it makes things easier down the road when things get more complicated and you’re using multiple geometries to map different aesthetics from different datasets. Now let’s get a little more sophisticated and add use some color to distinguish between different species (species). That is as easy as setting the fill=species within the aesthetics mapping (aes()). ggplot()+ geom_col(data = df, mapping = aes(x=date,y=n,fill=species)) Note - the default ggplot colors are NOT colorblind friendly! Aesthetics that are specified outside of aes() are applied to that geometry, but not mapped to the data. Here color = 'black' will make the border of all bars black, regardless of the mapping between aesthetics and data. ggplot()+ geom_col(data = df, mapping = aes(x=date,y=n,fill=species), color = &#39;black&#39;) The output of a ggplot() function can be stored as a variable, which can be further altered, plotted, or saved later on. Let’s build the plot again, but store it as p instead of plotting it p &lt;- ggplot()+ geom_col(data = df, mapping = aes(x=date,y=n,fill=species), color = &#39;black&#39;) And now we can plot it by simply printing the variable p p 3.2 Formatting The default formatting options have been carefully chosen so that plots produced by ggplot2 tend to look pretty good right out of the box. Let’s go through some simple, common formatting tweaks. 3.2.1 Labels Updating labels is easy. There are a number of ways to do it. I prefer to use the labs() function and specify the new label you would like to be associated with each aesthetic. I’ll use NULL when I don’t want a label to appear p + labs(x = NULL, y = &#39;Detections per day&#39;, fill = &#39;Species&#39;) Note how I split each label onto a new line. This is optional but makes the code more readible. 3.2.2 Scales It’s common to want to change the scales in some way. This is achieved using a suite of functions with the following naming convention scale_[aesthetic]_*(). I often do this to update the axis limits or change the default color scheme (I really don’t like the default ggplot2 colors!) Here’s how to change the y axis limits and break points. I also often use the expand = c(0,0) arugment to remove the margins at the top and bottom of the plot area. p + scale_y_continuous(limits = c(0,50), breaks = seq(0,50,5), expand = c(0,0)) Here’s how to change the color map. I recommend setting the values by hand for discrete variables, and using a viridis colormap for continuous variables. Here’s a convenient way to map color values by hand using a named list. p + scale_fill_manual(values = c(&#39;fin&#39; = &#39;grey&#39;, &#39;humpback&#39; = &#39;blue&#39;, &#39;right&#39; = &#39;red&#39;, &#39;sei&#39; = &#39;white&#39;)) And finally, here’s how to change the time resolution on the x axis. p + scale_x_date(date_breaks = &#39;3 day&#39;, date_labels = &#39;%b %d&#39;) 3.2.3 Theme The overall look and feel of a plot are specified by the theme() function. There are also numerous default themes that can be called as follows: theme_bw() theme_classic() theme_minimal() theme_void() theme_dark() Here’s how our original plot looks with the theme_bw() theme applied p+theme_classic() You can also use arguments within the generic theme() function to change literally everything about how a plot looks. Here’s a quick example of how to turn the gridlines off: p+theme(panel.grid = element_blank()) 3.2.4 Putting it all together Let’s build a nicely formatted plot from scratch # start ggplot p_bar = ggplot()+ # specify geometry, data, and aesthetic mapping geom_col(data = df, mapping = aes(x=date,y=n,fill=species), color = &#39;black&#39;)+ # define fill colors to use for each species scale_fill_manual(values = c(&#39;fin&#39; = &#39;grey&#39;, &#39;humpback&#39; = &#39;blue&#39;, &#39;right&#39; = &#39;red&#39;, &#39;sei&#39; = &#39;white&#39;))+ # update the y axis limits and break points scale_y_continuous(limits = c(0,50), breaks = seq(0,50,5), expand = c(0,0))+ # update x axis for more regular date breaks scale_x_date(date_breaks = &#39;3 day&#39;, date_labels = &#39;%b %d&#39;)+ # write nice labels labs(x = NULL, y = &#39;Detections per day&#39;, fill = &#39;Species&#39;)+ theme_classic() # print plot p_bar 3.2.5 Saving Saving a plot in ggplot2 is done using the ggsave() function. Here’s how I’d do that with the example plot: ggsave(filename = &#39;bar.png&#39;, plot = p_bar, width = 5, height = 5, units = &#39;in&#39;, dpi = 300) "],
["examples.html", "Chapter 4 Examples 4.1 Bar plot 4.2 Line plot 4.3 Box plot 4.4 Scatter plot 4.5 Profiles 4.6 Map", " Chapter 4 Examples Using ggplot2 is very different from most other plotting packages, and can be a lot to take in at first. I think the best way to wrap your head around it is to see it applied in a variety of ways, and of course try to do it yourself. Let’s work through a few more common types of plots. 4.1 Bar plot Here’s the bar plot produced during the previous example. ggplot()+ geom_col(data = df, mapping = aes(x=date,y=n,fill=species), color = &#39;black&#39;)+ scale_fill_manual(values = c(&#39;fin&#39; = &#39;grey&#39;, &#39;humpback&#39; = &#39;blue&#39;, &#39;right&#39; = &#39;red&#39;, &#39;sei&#39; = &#39;darkslategrey&#39;))+ scale_y_continuous(limits = c(0,50), breaks = seq(0,50,5), expand = c(0,0))+ scale_x_date(date_breaks = &#39;3 day&#39;, date_labels = &#39;%b %d&#39;)+ labs(x = NULL, y = &#39;Detections per day&#39;, fill = &#39;Species&#39;)+ theme_classic() 4.2 Line plot Here’s an example of using a line plot to display the same data as plotted above. Note the many similarities to the previous plot. The main differences here are in the geometries used, and the coloring aesthetics. ggplot(data = df, mapping = aes(x=date, y=n, color=species, group=species))+ geom_path()+ geom_point()+ scale_color_manual(values = c(&#39;fin&#39; = &#39;grey&#39;, &#39;humpback&#39; = &#39;blue&#39;, &#39;right&#39; = &#39;red&#39;, &#39;sei&#39; = &#39;darkslategrey&#39;))+ scale_y_continuous(limits = c(0,50), breaks = seq(0,50,5), expand = c(0,0))+ scale_x_date(date_breaks = &#39;3 day&#39;, date_labels = &#39;%b %d&#39;)+ labs(x = NULL, y = &#39;Detections per day&#39;, color = &#39;Species&#39;)+ theme_bw() 4.3 Box plot Here’s a simple box plot, which relies on ggplot2 to compute some summary statistics ‘under the hood’. These are described in some detail in the geom_boxplot() documentation. ggplot()+ geom_boxplot(data = df, aes(x = species, y = n))+ labs(x = &#39;Species&#39;, y = &#39;Detections per day&#39;) If you do not want to rely upon ggplot to compute summary statistics, you can build them yourself prior to plotting. The key to that is using the stat='indentity argument in geom_boxplot(). Here’s an example of how one might to do that. df %&gt;% group_by(species) %&gt;% summarize( ymax = quantile(n,.95), upper = quantile(n,.75), middle = quantile(n, 0.5), lower = quantile(n,.25), ymin = quantile(n,.05) ) %&gt;% ggplot(aes(x = species, ymin = ymin, lower = lower, middle = middle, upper = upper, ymax = ymax))+ geom_boxplot(stat = &#39;identity&#39;) Note how I was able to pipe directly from the summary statistics into the ggplot without writing the data to an intermediate variable. That’s not necessary, but can be useful shorthand. 4.4 Scatter plot For the next few plots we’ll be switching over to plotting data from ocean gliders. This is a simple temperature-salinity diagram, which is essentially a scatter plot for visualizing water mass physics. In this case I’ve decided to color the points by the density of the water. This is similar to what we’ve seen before. I have used the scale_color_viridis_c() to switch from the default ggplot colormap to a nice, perceptually uniform viridis colormap. I also am making the colorbar taller with the argument guide = guide_colourbar(barheight = 15). # read in ocean glider data gld = readRDS(url(&#39;https://hansenjohnson.org/files/data/glider.rds&#39;)) # plot ggplot(data=gld, aes(y = temperature, x = salinity, color = density))+ geom_point(shape = 16)+ labs(y = &#39;Temperature (C)&#39;, x = &#39;Salinity (psu)&#39;, color = &#39;Density (kg/m3)&#39;)+ scale_color_viridis_c(guide = guide_colourbar(barheight = 15))+ theme_bw() 4.5 Profiles 4.5.1 Temperature profiles Here I’m going to plot vertical glider profiles. The first new things here is the scale_y_reverse() function, which simply reverses the y axis direction. The other, incredibly powerful feature I’m showing here is the facet_wrap() function. This effectively creates separate subplots for each category of the facetting variable (in this case profile_id). ggplot(gld, aes(x=temperature,y=pressure,group=profile_id))+ geom_path()+ scale_y_reverse()+ labs(x = &#39;Temperature (C)&#39;, y = &#39;Pressure (dbar)&#39;)+ facet_wrap(~profile_id)+ theme_bw()+ theme() 4.5.2 Timeseries These profiles can also be viewed as a timeseries. The main new things here is that I’ve done some formatting to rotate and center the title of the colorbar. ggplot(gld, aes(x=time,y=pressure,color=temperature))+ geom_point()+ scale_y_reverse()+ scale_x_datetime(position = &#39;top&#39;, date_breaks = &#39;3 hours&#39;, date_labels = &#39;%H:%M&#39;)+ scale_color_viridis_c( guide = guide_colourbar(barheight = 15, title.theme = element_text(angle=90), title.position = &#39;right&#39;, title.hjust = 0.5))+ labs(x = &#39;Time&#39;, y = &#39;Pressure (dbar)&#39;, color = &#39;Temperature (C)&#39;)+ theme_classic()+ theme() 4.6 Map Mapping requires using several datasets and plotting geometries. It can be complicated, but it’s all still the same ggplot2 grammar. Here I’m using geom_polygon() to plot the coastline, geom_contour() to add a depth contour, geom_path() to draw the glider track and geom_point() to add the whale detections. The order here matters. Things added later will be plotted on top of things added earlier. The other important new concept here is the coord_quickmap(). The coord_*() functions allow you to access and alter the underlying coordinate system that ggplot is using to render your geometry. Using coord_quickmap() is a quick approximation of a spherical map projection. I’d recommend switching over to coord_map() in situations where you want a more accurate projection, and are prepared to wait for it. # positions of whale detection det = readRDS(url(&#39;https://hansenjohnson.org/files/data/detections_all.rds&#39;)) # trackline of detection platform trk = readRDS(url(&#39;https://hansenjohnson.org/files/data/detections_track.rds&#39;)) # coastline data bg = readRDS(url(&#39;https://hansenjohnson.org/files/data/coastline.rds&#39;)) # bathymetry data bf = readRDS(url(&#39;https://hansenjohnson.org/files/data/gg_bathy.rds&#39;)) # make plot ggplot()+ # add 100m contour geom_contour(data = bf, aes(x=x, y=y, z=z), breaks=c(-100), size=c(0.3), colour=&quot;grey&quot;)+ # add coastline geom_polygon(data = bg, aes(x = lon, y = lat, group = group), fill = &quot;darkgrey&quot;, color = NA) + # add tracks and detections geom_path(data = trk, aes(x=lon,y=lat), alpha = 0.7, color = &#39;blue&#39;)+ geom_point(data = det, aes(x=lon,y=lat), shape = 21, alpha = 0.7, fill = &#39;red&#39;)+ # configure projection and plot domain coord_quickmap(xlim = c(-66, -64.75), ylim = c(42.5, 43.5))+ # facet by species facet_wrap(~species)+ # formatting labs(x = NULL, y = NULL)+ theme_bw()+ theme(panel.grid = element_blank()) "],
["conclusions.html", "Chapter 5 Conclusions 5.1 Extensions 5.2 Recommendations 5.3 Getting help 5.4 The end", " Chapter 5 Conclusions 5.1 Extensions Many enterprising people have written additional packages that build upon ggplot2. Here are a few I think are worth checking out: 5.1.1 plotly plotly provides an amazingly convenient way to convert ggplot2 objects to interactive plots using the ggplotly() function. Here’s a very quick example library(plotly) ggplotly(p_bar) 5.1.2 gganimate gganimate allows you to convert ggplot2 objects into animations in just a few lines of code. I wrote a post awhile back showing how this can be applied to ocean drifter data. 5.2 Recommendations Do any and all calculations outside of ggplot2 There are many options to have ggplot2 do a lot of data maniupulation and processing ‘under the hood’. Examples can be anything from generating histograms to fitting linear models to smoothing raster maps. Where possible, I strongly recommend doing these calculations outside of ggplot so that you know exactly what’s going on. You also will likely see a performance increase for data-heavy plots. Always change default colormaps Unfortunately most of the default colormaps are not color-blind friendly. I recommend using viridis colormaps for continuous variables, and manually-specifying discrete variable colors using guidance from colorbrewer2 (https://colorbrewer2.org/) Have a separate R script for each figure I cannot recommend this strongly enough. You will inevitably need to tweak the formatting of plots again, and again, and again. Having one plot in one script allows you to do this without needing to constantly re-process your data or re-plot other figures. I use the naming convention f_*.R to identify scripts that produce figures, which I have found incredibly helpful for staying organized. 5.3 Getting help One of the other reasons for using ggplot2 is the immense amount of help available online. You will find wonderful documentation on the tidyverse web page (https://tidyverse.org/), ggplot2 book (https://ggplot2-book.org/), and on various forums (like stackoverflow) and blogs. 5.4 The end Happy plotting :) "],
["references.html", "References", " References "]
]
